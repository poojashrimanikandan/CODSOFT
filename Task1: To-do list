import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import json
from datetime import datetime

FILE_NAME = 'todo_list.json'

def load_tasks():
    try:
        with open(FILE_NAME, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_tasks(tasks):
    with open(FILE_NAME, 'w') as file:
        json.dump(tasks, file, indent=4)

def add_task():
    task_description = task_entry.get()
    due_date = date_entry.get()
    if task_description and due_date:
        try:
            datetime.strptime(due_date, '%d-%m-%Y')  
            tasks = load_tasks()
            tasks.append({'description': task_description, 'due_date': due_date, 'status': 'Not Completed'})
            save_tasks(tasks)
            update_task_list()
            task_entry.delete(0, tk.END)
            date_entry.delete(0, tk.END)
        except ValueError:
            messagebox.showwarning("Date Error", "Invalid date format. Use DD-MM-YYYY.")
    else:
        messagebox.showwarning("Input Error", "Both description and due date are required.")

def update_task():
    selected = task_listbox.curselection()
    if selected:
        index = selected[0]
        tasks = load_tasks()
        task = tasks[index]
        task['status'] = 'Completed' if task['status'] == 'Not Completed' else 'Not Completed'
        save_tasks(tasks)
        update_task_list()
    else:
        messagebox.showwarning("Selection Error", "No task selected.")

def delete_task():
    selected = task_listbox.curselection()
    if selected:
        index = selected[0]
        tasks = load_tasks()
        tasks.pop(index)
        save_tasks(tasks)
        update_task_list()
    else:
        messagebox.showwarning("Selection Error", "No task selected.")

def update_task_list():
    task_listbox.delete(0, tk.END)
    tasks = load_tasks()
    for idx, task in enumerate(tasks):
        status = task['status']
        display_text = f"{idx + 1}. {task['description']} | Due: {task['due_date']} | Status: {status}"
        task_listbox.insert(tk.END, display_text)
root = tk.Tk()
root.title("To-Do List Application")
frame = tk.Frame(root)
frame.pack(padx=20, pady=20)

task_label = tk.Label(frame, text="Task Description:")
task_label.grid(row=0, column=0, padx=5, pady=5)

task_entry = tk.Entry(frame, width=40)
task_entry.grid(row=0, column=1, padx=5, pady=5)

date_label = tk.Label(frame, text="Due Date (DD-MM-YYYY):")
date_label.grid(row=1, column=0, padx=5, pady=5)

date_entry = tk.Entry(frame, width=40)
date_entry.grid(row=1, column=1, padx=5, pady=5)

add_button = tk.Button(frame, text="Add Task", command=add_task)
add_button.grid(row=2, column=0, columnspan=2, pady=5)

update_button = tk.Button(frame, text="Update Task", command=update_task)
update_button.grid(row=3, column=0, columnspan=2, pady=5)

delete_button = tk.Button(frame, text="Delete Task", command=delete_task)
delete_button.grid(row=4, column=0, columnspan=2, pady=5)

task_listbox = tk.Listbox(root, selectmode=tk.SINGLE, width=80, height=20)
task_listbox.pack(padx=20, pady=20, fill=tk.BOTH, expand=True)

update_task_list()
root.mainloop()
